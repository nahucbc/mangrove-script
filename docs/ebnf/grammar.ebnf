character = alpha | digit ;

alpha = "A" | "B" | "C" | "D" | "E" | "F" | "G"
      | "H" | "I" | "J" | "K" | "L" | "M" | "N"
      | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
      | "V" | "W" | "X" | "Y" | "Z"
      | "a" | "b" | "c" | "d" | "e" | "f" | "g"
      | "h" | "i" | "j" | "k" | "l" | "m" | "n"
      | "o" | "p" | "q" | "r" | "s" | "t" | "u"
      | "v" | "w" | "x" | "y" | "z" ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

quotes = "'" | '"';

square_brackets = "[" | "]";

key_brackets = "{" | "}";

parentheses = "(" | ")";

dot = "."; 

comma = ",";

double_colon = ":";

semicolon = ";";

identifier = (character | "_"), {character | "_"};

string = quotes, {character | "\\" (quotes | "\\")}, quotes;

i8 = "-128".."127";

i16 = "-32.768".."32.767";

i32 = "-2.147.483.648".."2.147.483.647";

i64 = "-9.223.372.036.854.775.808".."9.223.372.036.854.775.807";

u8 = "0".."255";

u16 = "0".."65.535";

u32 = "0".."4.294.967.295";

u64 = "0".."18.446.744.073.709.551.615";

int = i8 | u8 | i16 | u16 | i32 | u32 | i64 | u64;

type = int | string;

assignment = identifier, [type], "=", expression;

if = "if", expression, double_colon, [statement] | else;

else = "else", double_colon, [statement];

while = "while", condition, double_colon, [statement];

for = "for", identifier, "in", identifier, double_colon, [statement];

ops = "==" | "!=" | "<" | ">" | "<=" | ">=" ;

math_ops = "+" | "-" | "*" | "/" ;

term = factor, {("*" | "/"), factor};

factor = literal | identifier | "(", expression, ")";

function = "fn", identifier, parentheses, [parameters], parentheses, double_colon, [statement];

function_call = identifier, "(", [parameters], ")";

parameters = {identifier, {comma, identifier}};

decorator = "@", identifier, [parameters];

class = "class", identifier, ":", class_body;

class_body = {class_property | class_method};

class_property = assignment;

class_method = function;

conditional_statement = if;

loop_statement = while, for;

class_statement = class_property | class_method;

expression = function_call, identifier, string, term; 

statement = expression, assignment, conditional_statement, loop_statement, class_statement;

